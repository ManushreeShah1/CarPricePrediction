# -*- coding: utf-8 -*-
"""predict-sales.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZjEggTbb7H6TfgXDIGFf-5ive8iXliwr
"""

import os
import pandas as pd
import numpy as np

"""Load Dataset"""

df=pd.read_csv(r"C:\Users\Manushree Shah\Downloads\Dummy Data HSS.csv")

"""Target is Sales. We need to predict the sales using linear regression and check the performance. There are 4 categories in Influencer xategory here namely Mega,Micro,Macro and Nano"""

df.head()

df.shape

df.info()

df.describe()

df.describe(include=['O'])

df.isnull().sum()

df = df.dropna()

df.nunique()

"""USING ONE-HOT ENCODING FOR INFLUENCERS COLUMN"""

df_encoded = pd.get_dummies(df, columns=['Influencer'])
df_encoded = df_encoded.astype(int)
print(df_encoded)

"""Use Linear Regression to check Predicted Sales and calculate R2,MAE AND MSE to check performance"""

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score

# Split data into features (X) and target variable (y)
X = df_encoded.drop('Sales', axis=1)
y = df_encoded['Sales']


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()


model.fit(X_train, y_train)


y_pred = model.predict(X_test)


r2 = r2_score(y_test, y_pred)
print(f'R-squared score: {r2}')

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
mae2 = mean_absolute_error(y_test, y_pred)
mse2 = mean_squared_error(y_test, y_pred)

print(f"Mean Absolute Error (MAE): {mae2}")
print(f"Mean Squared Error (MSE): {mse2}")

# Add predicted sales to the DataFrame
X_test_with_sales = X_test.join(df['Sales'])
X_test_with_sales['Predicted_Sales'] = y_pred

# Group by Influencer and calculate the average actual and predicted sales
grouped = X_test_with_sales.groupby(['Influencer_Macro', 'Influencer_Mega', 'Influencer_Micro', 'Influencer_Nano'])[['Sales', 'Predicted_Sales']].mean()
grouped.head()

"""TASK 1: PERFORMANCE OF MODEL ON ALL CATEGORIES"""

import matplotlib.pyplot as plt

# Create a scatter plot to compare original sales vs. predicted sales
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, color='blue', label='Predicted Sales')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], linestyle='--', color='red', label='Sales')
plt.xlabel('Original Sales')
plt.ylabel('Predicted Sales')
plt.title('Original Sales vs. Predicted Sales')
plt.legend()
plt.grid(True)
plt.show()

"""TASK 2: PERFORMANCE OF ONLY FIRST 3 COLUMNS- MACRO/MEGA/MICRO, WHEN THERE ARE 4 COLUMNS IN TOTAL(TRAINED ON ENTIRE DATASET)"""

# Extract the predictions and actual sales data for the first three categories
y_pred_ABC = y_pred[(X_test['Influencer_Macro'] == 1) | (X_test['Influencer_Mega'] == 1) | (X_test['Influencer_Micro'] == 1)]
y_test_ABC = y_test[(X_test['Influencer_Macro'] == 1) | (X_test['Influencer_Mega'] == 1) | (X_test['Influencer_Micro'] == 1)]

# Calculate the R-squared (R2) score for the first three categories
r2_ABC = r2_score(y_test_ABC, y_pred_ABC)
print(f'R-squared score for first three categories: {r2_ABC}')

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
mae2 = mean_absolute_error(y_pred_ABC, y_test_ABC)
mse2 = mean_squared_error(y_pred_ABC, y_test_ABC)

print(f"Mean Absolute Error (MAE): {mae2}")
print(f"Mean Squared Error (MSE): {mse2}")

import matplotlib.pyplot as plt
# Plotting the scatter plot for original sales vs predicted sales
plt.figure(figsize=(8, 6))
plt.scatter(y_test_ABC.values, y_pred_ABC, color='blue', label='Predicted Sales')
plt.plot([min(y_test_ABC.values), max(y_test_ABC.values)], [min(y_test_ABC.values), max(y_test_ABC.values)], linestyle='--', color='red', label='Original Sales')
plt.xlabel('Original Sales')
plt.ylabel('Predicted Sales')
plt.title('Original Sales vs Predicted Sales for Categories A, B, C')
plt.legend()
plt.grid(True)
plt.show()

df.columns

"""CREATE NEW DATASET HAVING 2 MORE DIFFERENT CATEGORIES IN INFLUENCER COLUMN-'E'/'F'. NOW COMBINE THESE TWO DATAFRAMES TO MAKE IT ONE AND CHECK THE PREDICTIONS BASED ON THE TASKS GIVEN"""

# Create a DataFrame with random data
data = {
    'TV': np.random.randint(10, 100, 550),
    'Radio': np.random.uniform(0, 50, 550),
    'Social Media': np.random.uniform(0, 13, 550),
    'Influencer': np.random.choice(['E', 'F'], 550),
     'Sales': np.random.uniform(31, 364, 550)
}
df1 = pd.DataFrame(data)

df1.head()

df1.shape

df_new=pd.concat([df, df1], ignore_index=True)
df_new.head()

df_new.shape

df_new.nunique()

"""CHECK PERFORMANCE OF NEW DATASET PREDICTION WHEN THERE ARE 6 CATEGORIES NOW IN THE INFLUENECER COLUMN"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score


combined_df_encoded = pd.get_dummies(df_new, columns=['Influencer'])


X1 = combined_df_encoded.drop('Sales', axis=1)
y1 = combined_df_encoded['Sales']

# Split the data into training and testing sets (80% train, 20% test)
X1_train, X1_test, y1_train, y1_test = train_test_split(X1, y1, test_size=0.2, random_state=42)


model = LinearRegression()
model.fit(X1_train, y1_train)


y1_pred = model.predict(X1_test)

mae = mean_absolute_error(y1_test, y1_pred)
mse = mean_squared_error(y1_test, y1_pred)
r2 = r2_score(y_test, y_pred)


print(f"Mean Absolute Error (MAE): {mae}")
print(f"Mean Squared Error (MSE): {mse}")
print(f"R-squared (R2): {r2}")

combined_df_encoded.head()

combined_df_encoded['Predicted Sales'] = model.predict(X1)

plt.figure(figsize=(8, 6))
plt.scatter(y1_test, y1_pred, color='blue', label='Predicted Sales')
plt.plot([min(y1_test), max(y1_test)], [min(y1_test), max(y1_test)], linestyle='--', color='red', label='Sales')
plt.xlabel('Original Sales')
plt.ylabel('Predicted Sales')
plt.title('Original Sales vs. Predicted Sales')
plt.legend()
plt.grid(True)
plt.show()

"""TRYING TO USE REGULARIZATION TECHNIQUES TO IMPROVE ACCURACY IN PREDICTIONS"""

from sklearn.linear_model import Ridge

X2 = combined_df_encoded.drop(['Sales', 'Predicted Sales'], axis=1)
y2 = combined_df_encoded['Sales']

# Split the data into training and testing sets (80% train, 20% test)
X2_train, X2_test, y2_train, y2_test = train_test_split(X2, y2, test_size=0.2, random_state=42)


alpha = 0.1
model2 = Ridge(alpha=alpha)
model2.fit(X2_train, y2_train)


y2_pred = model2.predict(X2_test)


mae2 = mean_absolute_error(y2_test, y2_pred)
mse2 = mean_squared_error(y2_test, y2_pred)
r2_2 = r2_score(y2_test, y2_pred)

print(f"Mean Absolute Error (MAE): {mae2}")
print(f"Mean Squared Error (MSE): {mse2}")
print(f"R-squared (R2): {r2_2}")

plt.figure(figsize=(8, 6))
plt.scatter(y2_test, y2_pred, color='blue', label='Predicted Sales')
plt.plot([min(y1_test), max(y1_test)], [min(y2_test), max(y2_test)], linestyle='--', color='red', label='Sales')
plt.xlabel('Original Sales')
plt.ylabel('Predicted Sales')
plt.title('Original Sales vs. Predicted Sales')
plt.legend()
plt.grid(True)
plt.show()

"""TASK 3: TO CHECK PERFORMANCE OF THE TWO NEWLY ADDED CATEGORIES WHEN THE TRAINING IS DONE ON ENTIRE DATASET."""

from sklearn.metrics import r2_score

# Filter predicted values and actual values for E and F classes
y_pred_EF = y2_pred[(X2_test['Influencer_E'] == 1) | (X2_test['Influencer_F'] == 1)]
y_test_EF = y2_test[(X2_test['Influencer_E'] == 1) | (X2_test['Influencer_F'] == 1)]

r2_EF = r2_score(y_test_EF, y_pred_EF)
print(f'R-squared score for E and F classes: {r2_EF}')

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
mae2 = mean_absolute_error(y_pred_EF, y_test_EF)
mse2 = mean_squared_error(y_pred_EF, y_test_EF)


print(f"Mean Absolute Error (MAE): {mae2}")
print(f"Mean Squared Error (MSE): {mse2}")

"""TASK 4: TO CHECK PERFORMANCE OF THE 3 CATEGORIES,2 NEWLY ADDED-'E' AND 'F' AND FOR 'MEGA',CATEGORY WHEN THE TRAINING IS DONE ON ENTIRE DATASET."""

from sklearn.metrics import r2_score

y_pred_EF = y2_pred[(X2_test['Influencer_E'] == 1) | (X2_test['Influencer_F'] == 1) | (X2_test['Influencer_Mega'] == 1)]
y_test_EF = y2_test[(X2_test['Influencer_E'] == 1) | (X2_test['Influencer_F'] == 1) | (X2_test['Influencer_Mega'] == 1)]

r2_EF = r2_score(y_test_EF, y_pred_EF)
print(f'R-squared score for Mega, E and F classes: {r2_EF}')

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
mae2 = mean_absolute_error(y_test_EF, y_pred_EF)
mse2 = mean_squared_error(y_test_EF, y_pred_EF)

print(f"Mean Absolute Error (MAE): {mae2}")
print(f"Mean Squared Error (MSE): {mse2}")